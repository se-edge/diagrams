@startuml
title "ApplicationManager updateApp"

participant ApplicationManager as AM
database Storage as Stor
participant EdgeAppFactory as EAF
participant EdgeApplication as EApp

[->AM: updateApp()
!startsub updateApp

note over AM: We may need to check if application allready installed
AM->EAF ++: [[http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.githubusercontent.com/se-edge/diagrams/develop/ApplicationManager/EdgeAppFactory.install.puml&fmt=svg install(json)]]
EAF-->AM --: EdgeApp

AM->EApp ++: [[http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.githubusercontent.com/se-edge/diagrams/develop/ApplicationManager/ComposeApplication.downloadApp.puml&fmt=svg downloadApp()]]
EApp-->AM --:

opt old app is running (to be defined)
    AM->EApp ++: oldApp.stop()
    EApp-->AM --:
end


AM->Stor ++: saveApplication()
Stor-->AM --:

note over AM: TODO

alt desired running
    note over AM: Do not use verify here because we need to do up and not start
    AM->EApp ++: [[http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.githubusercontent.com/se-edge/diagrams/develop/ApplicationManager/ComposeApplication.up.puml&fmt=svg up()]]
    EApp-->AM --:
else desired stopped
    AM->EApp ++: [[http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.githubusercontent.com/se-edge/diagrams/develop/ApplicationManager/ComposeApplication.create.puml&fmt=svg create()]]
    EApp-->AM --:
end

!endsub
AM-->[:
@enduml

